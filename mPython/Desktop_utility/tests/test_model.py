import unittest
from model import Model

class TestModel(unittest.TestCase):
    def setUp(self):
        self.model = Model()

    def test_get_message_initial(self):
        self.assertEqual(self.model.get_message(), "Эта кнопка пока ничего не делает!")

    def test_set_message(self):
        new_message = "Новое сообщение"
        self.model.set_message(new_message)
        self.assertEqual(self.model.get_message(), new_message)

if __name__ == "__main__":
    unittest.main()
# _____________________________________________________________________
# import unittest  # Импортируем модуль unittest для написания тестов
# from model import Model  # Импортируем класс Model из модуля model

# class TestModel(unittest.TestCase):
#     # Метод, который выполняется перед каждым тестом
#     def setUp(self):
#         self.model = Model()  # Создаем экземпляр модели для каждого теста

#     # Тестируем начальное сообщение
#     def test_get_message_initial(self):
#         # Проверяем, что начальное сообщение соответствует ожидаемому
#         self.assertEqual(self.model.get_message(), "Эта кнопка пока ничего не делает!")

#     # Тестируем установку нового сообщения
#     def test_set_message(self):
#         new_message = "Новое сообщение"  # Определяем новое сообщение
#         self.model.set_message(new_message)  # Устанавливаем новое сообщение в модели
#         # Проверяем, что сообщение в модели обновлено до нового значения
#         self.assertEqual(self.model.get_message(), new_message)

# # Проверяем, является ли этот файл основным модулем
# if __name__ == "__main__":
#     unittest.main()  # Запускаем все тесты
"""
_____________________________________________________________________
<<< Порядок работы программы >>>

    Импорт библиотек:
        Программа начинает с импорта модуля unittest, который используется для написания и выполнения тестов, а также класса Model из модуля model, который будет тестироваться.
    Определение класса TestModel:
        Создается класс TestModel, который наследует от unittest.TestCase. Этот класс будет содержать тесты для модели.
    Метод setUp:
        Метод setUp вызывается перед каждым тестом. В этом методе создается новый экземпляр Model, который будет использоваться в тестах. Это позволяет обеспечить чистое состояние для каждого теста.
    Тестирование начального сообщения:
        Метод test_get_message_initial проверяет, что метод get_message возвращает ожидаемое начальное сообщение.
        Используется метод assertEqual, который сравнивает фактическое значение, возвращаемое self.model.get_message(), с ожидаемым значением "Эта кнопка пока ничего не делает!". Если значения не совпадают, тест не пройдет.
    Тестирование установки нового сообщения:
        Метод test_set_message проверяет, что метод set_message корректно обновляет сообщение в модели.
        В этом методе:
            Определяется новое сообщение "Новое сообщение".
            Вызывается метод set_message, чтобы установить новое сообщение в модели.
            Затем проверяется, что метод get_message возвращает обновленное сообщение, используя assertEqual.
    Запуск тестов:
        В блоке if __name__ == "__main__": программа проверяет, запущен ли этот файл как основной модуль. Если да, то вызывается unittest.main(), который запускает все тесты, определенные в классе TestModel.
"""