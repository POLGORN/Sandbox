from model import Model
from view import View

class Controller:
    def __init__(self, root):
        self.model = Model()
        self.view = View(root)
        self.view.set_button_command(self.on_button_click)

    def on_button_click(self):
        user_input = self.view.get_input()
        self.model.set_message(user_input)
        message = self.model.get_message()
        self.view.show_message(message)
# _____________________________________________________________________
# from model import Model  # Импортируем класс Model из модуля model
# from view import View  # Импортируем класс View из модуля view

# class Controller:
#     def __init__(self, root):
#         # Инициализация контроллера
#         self.model = Model()  # Создаем экземпляр модели, которая содержит данные и логику
#         self.view = View(root)  # Создаем экземпляр представления, передавая корневое окно
#         self.view.set_button_command(self.on_button_click)  # Устанавливаем команду для кнопки в представлении

#     def on_button_click(self):
#         # Метод, который вызывается при нажатии на кнопку
#         user_input = self.view.get_input()  # Получаем пользовательский ввод из представления
#         self.model.set_message(user_input)  # Устанавливаем сообщение в модели
#         message = self.model.get_message()  # Получаем обновленное сообщение из модели
#         self.view.show_message(message)  # Отображаем сообщение в представлении
"""
_____________________________________________________________________
<<<  Порядок работы программы >>>

    Импорт классов:
        Программа начинает с импорта классов Model и View из соответствующих модулей. Model отвечает за данные и бизнес-логику, а View — за отображение интерфейса.
    Определение класса Controller:
        Создается класс Controller, который управляет взаимодействием между моделью и представлением.
    Инициализация контроллера:
        В конструкторе __init__ класса Controller:
            Создается экземпляр Model, который будет использоваться для хранения и обработки данных.
            Создается экземпляр View, передавая корневое окно в качестве аргумента.
            Устанавливается команда для кнопки в представлении, которая будет вызывать метод on_button_click при нажатии.
    Обработка нажатия кнопки:
        Метод on_button_click вызывается, когда пользователь нажимает на кнопку в интерфейсе.
        В этом методе:
            Вызывается метод get_input у представления, который возвращает пользовательский ввод (например, текст из текстового поля).
            Устанавливается сообщение в модели с помощью метода set_message, передавая пользовательский ввод.
            Получается обновленное сообщение из модели с помощью метода get_message.
            Сообщение отображается в представлении с помощью метода show_message.
"""