import tkinter as tk
from tkinter import messagebox

class View:
    def __init__(self, root):
        self.root = root
        self.root.title("Программа-пустышка")
        self.root.geometry("400x300")

        self.label = tk.Label(root, text="Добро пожаловать в программу-пустышку!", font=("Arial", 14))
        self.label.pack(pady=20)

        self.entry = tk.Entry(root)
        self.entry.pack(pady=10)

        self.button = tk.Button(root, text="Нажми меня")
        self.button.pack(pady=10)

        self.quit_button = tk.Button(root, text="Выход", command=root.quit)
        self.quit_button.pack(pady=10)

    def set_button_command(self, command):
        self.button.config(command=command)

    def show_message(self, message):
        messagebox.showinfo("Информация", message)

    def get_input(self):
        return self.entry.get()
# ________________________________________________________________________________
# import tkinter as tk  # Импортируем библиотеку tkinter для создания графического интерфейса
# from tkinter import messagebox  # Импортируем модуль messagebox для отображения всплывающих окон

# class View:
#     def __init__(self, root):
#         self.root = root  # Сохраняем ссылку на корневое окно
#         self.root.title("Программа-пустышка")  # Устанавливаем заголовок окна
#         self.root.geometry("400x300")  # Устанавливаем размер окна (ширина x высота)

#         # Создаем метку с приветственным текстом и устанавливаем шрифт
#         self.label = tk.Label(root, text="Добро пожаловать в программу-пустышку!", font=("Arial", 14))
#         self.label.pack(pady=20)  # Размещаем метку в окне с отступом по вертикали

#         # Создаем текстовое поле для ввода данных
#         self.entry = tk.Entry(root)
#         self.entry.pack(pady=10)  # Размещаем текстовое поле в окне с отступом по вертикали

#         # Создаем кнопку, которая будет использоваться для взаимодействия
#         self.button = tk.Button(root, text="Нажми меня")
#         self.button.pack(pady=10)  # Размещаем кнопку в окне с отступом по вертикали

#         # Создаем кнопку выхода, которая завершает программу
#         self.quit_button = tk.Button(root, text="Выход", command=root.quit)
#         self.quit_button.pack(pady=10)  # Размещаем кнопку выхода в окне с отступом по вертикали

#     def set_button_command(self, command):
#         # Метод для установки команды, которая будет вызываться при нажатии на кнопку
#         self.button.config(command=command)  # Настраиваем кнопку с переданной командой

#     def show_message(self, message):
#         # Метод для отображения всплывающего окна с сообщением
#         messagebox.showinfo("Информация", message)  # Показываем всплывающее окно с заданным сообщением

#     def get_input(self):
#         # Метод для получения текста, введенного пользователем в текстовое поле
#         return self.entry.get()  # Возвращаем введенный текст
"""
________________________________________________________________________________
<<< Порядок работы программы >>>

    Импорт библиотек:
        Программа начинает с импорта библиотеки tkinter, которая используется для создания графического интерфейса, и модуля messagebox, который позволяет отображать всплывающие окна.
    Определение класса View:
        Создается класс View, который отвечает за отображение интерфейса приложения.
    Инициализация представления:
        В конструкторе __init__ класса View:
            Сохраняется ссылка на корневое окно root.
            Устанавливается заголовок и размер окна.
            Создается метка с приветственным текстом, которая размещается в окне.
            Создается текстовое поле для ввода данных, которое также размещается в окне.
            Создаются две кнопки: одна для взаимодействия (пока без команды) и другая для выхода из приложения.
    Метод set_button_command:
        Этот метод позволяет установить команду, которая будет вызываться при нажатии на кнопку. Он принимает функцию command в качестве аргумента и настраивает кнопку с помощью config.
    Метод show_message:
        Этот метод отображает всплывающее окно с сообщением. Он принимает строку message и использует messagebox.showinfo для отображения информации пользователю.
    Метод get_input:
        Этот метод возвращает текст, введенный пользователем в текстовое поле, позволяя другим компонентам приложения получить доступ к пользовательскому вводу.
"""